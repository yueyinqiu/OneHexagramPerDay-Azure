@using com.nlf.calendar;
@using YiJingFramework.Core;
@using BlazorApp.Services;
@using System.Diagnostics;
@using YiJingFramework.Painting.Presenting;

@page "/query"

@inject ZhouyiTextProvider Text

<PageTitle>一日一卦 - 查询</PageTitle>

@if(hexagramToShow == hexagramToday)
{
    @if(hexagramName is null)
    {
        <h1>@HexagramCharInString 今日之卦</h1>
        <p></p>
        <p>一日一卦获取中……</p>
    }
    else
    {
        <h1>@HexagramCharInString @hexagramName</h1>
        <p></p>
        <p>一日一卦于 @DateTimeString</p>
    }
}
else
{
    @if(hexagramName is null)
    {
        <h1>@HexagramCharInString 卦爻辞查询中……</h1>
    }
    else
    {
        <h1>@HexagramCharInString @hexagramName</h1>
    }
}

<p></p>

<Hexagram Painting=@hexagramToShow></Hexagram>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public string? paintingToShowInString{ get; set; }

    private string? hexagramName;
    private char? hexagramChar;
    private string HexagramCharInString
        => hexagramChar.HasValue ? hexagramChar.Value.ToString() : string.Empty;
    private Painting hexagramToday;
    private Painting? hexagramToShow;

    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(paintingToShowInString))
            hexagramToShow = hexagramToday;
        else
            _ = Painting.TryParse(paintingToShowInString, out hexagramToShow);

        if (hexagramToShow is not null && hexagramToShow.Count is 6)
            hexagramChar = new CharacterConverter().ConvertTo(hexagramToShow);
    }

    protected override async Task OnParametersSetAsync()
    {
        var jing = await Text.GetJingAsync();

        if(hexagramToShow is not null && hexagramToShow.Count is 6)
        {
            var hex = jing.GetHexagram(hexagramToShow);

            var upper = hex.UpperTrigram;
            var lower = hex.LowerTrigram;

            hexagramName = upper == lower ?
                $"{hex.Name}为{upper.Nature}" :
                $"{upper.Nature}{lower.Nature}{hex.Name}";
        }

    }

    private readonly DateOnly date;
    private readonly Lunar lunar;
    public Query()
    {
        var current = DateTime.Now;
        this.date = DateOnly.FromDateTime(current);
        lunar = Lunar.fromDate(date.ToDateTime(new TimeOnly(6, 30)));
        hexagramToday = HexagramProvider.Provider.GetHexagram(date);
    }

    private string DateTimeString
    {
        get
        {
            return $"{lunar.getYearInGanZhi()}年{lunar.getMonthInChinese()}月{lunar.getDayInChinese()} {date:yyyy/MM/dd}";
        }
    }
}